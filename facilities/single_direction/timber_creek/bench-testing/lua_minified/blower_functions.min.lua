local a,b,c,d,e,f,g,h='speed','control','pressuresp','override','int_error','prev_error','cycleontime','cycleofftime'UPDATE_BLOWER_STARTUP_LATER={}BLOWER_CYCLE_IDLE_TIME=7;function initBlower(i)local j={}j[f]=0;j[e]=0;j[b]=100;j["fault_email"]=0;_G['BLOWER_'..i]=j end;function updateBlowerPIDValues(k,l,m,n,o)local p=0;local q=100;if n~=nil then p=n end;if o~=nil then q=o end;if l~=l then l=m end;if m==0 then m=l end;local r=100-tonumber(l)/tonumber(m)*100;local s;local t;local u;local v;local w=getNumericSetting('BlowerDerivativeTime',10)k[e]=tonumber(k[e])+r*w;if k[e]<0 then k[e]=0 end;if k[e]>100-tonumber(p)then k[e]=100-tonumber(p)end;s=(r-tonumber(k[f]))/w;t=tonumber(SETTINGS["BlowerGain"])*r;u=tonumber(SETTINGS["BlowerIntegral"])*k[e]v=tonumber(SETTINGS["BlowerDerivative"])*s;local result=t+u+v;digits=10^2;result=math.floor(result*digits+0.5)/digits;k[b]=result;if k[b]<0 then k[b]=0 end;if k[b]>100-tonumber(p)then k[b]=100-tonumber(p)end;k[b]=100-k[b]k[f]=r;if tonumber(k[b])<tonumber(p)then k[b]=tonumber(p)k[f]=0 end;if tonumber(k[b])>tonumber(q)then k[b]=tonumber(q)end end;function updateBlowerPIDPressureValues(k,x,m,y,n,o)local r=-(x-m)local s,t,u,v;local w=getNumericSetting('BlowerDerivativeTime',10)local p=0;local q=100;if n~=nil then p=tonumber(n)end;if o~=nil then q=tonumber(o)end;if k[e]~=k[e]then k[e]=0 end;k[e]=k[e]+r*w;if tonumber(k[e])<p then k[e]=p end;if tonumber(k[e])>q then k[e]=q end;s=(r-k[f])/w;t=SETTINGS["BlowerGain"]*r;u=SETTINGS["BlowerIntegral"]*k[e]v=SETTINGS["BlowerDerivative"]*s;result=t+u+v;digits=10^2;result=math.floor(result*digits+0.5)/digits;k[b]=result;if tonumber(k[b])<p then k[b]=p;k[f]=0 end;if tonumber(k[b])>q then k[b]=q end;if r~=r then k[f]=0 else k[f]=r end end;function updateBlowerRunValue(y,z)if reg[y..'customcycle']<1 then reg[y..g]=tonumber(SETTINGS['BlowerCycleOnTime'])reg[y..h]=tonumber(SETTINGS['BlowerCycleOffTime'])end;if reg[y..'cycle']<reg[y..h]*60 then stopBlower(y)if reg[y..'cycle']==0 then local A=reg[y..g]+reg[y..h]reg[y..'cycle']=A*60 end else if z==0 then stopBlower(y)else io[y..'run']=z end end end;function stopBlower(y)io[y..'run']=0;if io[y..a]~=nil then io[y..a]=0;reg[y..'value']=0 end end;function blowerHasFault(y)if io[y..'fault']~=nil and io[y..'fault']==0 then return true else return false end end;function autoBlowerSpeedControl(y,B,n,o)local p=0;local q=100;if n~=nil then p=n end;if o~=nil then q=o end;if reg[y..d]==0 then if B>0 and blowerHasFault(y)==false then reg[y..b]=1 else reg[y..b]=0 end end;if reg[y..b]==1 then if blowerHasFault(y)==false and reg[y..d]==0 then return true elseif reg[y..d]==1 and io[y..a]then io[y..a]=reg[y..'value']elseif io[y..a]~=nil then io[y..a]=0;reg[y..'value']=0 end elseif io[y..a]~=nil then io[y..a]=0;reg[y..'value']=0 end;return false end;function blowerDirectControl(y,C,n,o)local p=0;local q=100;if n~=nil then p=n end;if o~=nil then q=o end;if autoBlowerSpeedControl(y,C,n,o)==true then if C<tonumber(p)then C=tonumber(p)end;if C>tonumber(q)then C=tonumber(q)end;io[y..a]=C;reg[y..'value']=C end;updateBlowerRunValue(y,reg[y..b])end;function blowerTempControl(j,y,D,E,n,o)if autoBlowerSpeedControl(y,D,n,o)==true then updateBlowerPIDValues(j,D,E,n,o)io[y..a]=j[b]reg[y..'value']=j[b]end;updateBlowerRunValue(y,reg[y..b])end;function blowerPressureControl(j,y,x,F,G,n,o)if autoBlowerSpeedControl(y,G,n,o)==true then updateBlowerPIDPressureValues(j,x,F,y,n,o)io[y..a]=j[b]reg[y..'value']=j[b]end;if reg[y..d]==1 then io[y..'run']=reg[y..b]else if reg[y..b]==0 then stopBlower(y)else io[y..'run']=reg[y..b]end end end;function blowerOnOffTempControl(j,y,H,E,G,n,o)if autoBlowerSpeedControl(y,G,n,o)==true then if H>0 and H>=tonumber(E)then local A=reg[y..g]+reg[y..h]reg[y..'cycle']=A*60;reg[y..b]=1 end end;if reg[y..d]==1 then io[y..'run']=reg[y..b]else updateBlowerRunValue(y,reg[y..b])end end;function blowerFaultAlarm(j,i,I)if blowerHasFault('blower'..i)==true then if j['fault_email']==0 then sendAlarm(I,"Fault")j['fault_email']=1 end else j['fault_email']=0 end end;function updateDuctPressureSetpoint(J,K,L,M)local N="duct"..J;local O=N..'presssptimer'if io['blower'..J..'run']==1 then if tonumber(reg[O])==0 then reg[O]=SETTINGS["PressureSetpointChangeTimer"]*60;local P=0;local Q=0;local R=tonumber(SETTINGS["PressureSetpointChangeInterval"])local S,T,U;S=tonumber(SETTINGS["PressureSetpointMax"])T=tonumber(SETTINGS["PressureSetpointMin"])U=N..c;local V=reg[U]for W,X in ipairs(K)do if reg['loadzone'..X..'active']~=1 then local H=tempAvgForZones({X},L)if reg['zone'..X..'regime']==2 then H=minTempForZones({X},L)end;if M~=nil then if M=='min'then H=minTempForZones({X},L)elseif M=='max'then H=maxTempForZones({X},L)end end;H=tonumber(H)local Y=tonumber(spForZone(X))if reg['zone'..X..b]==1 then if H>Y then P=P+1 elseif H>0 and H<Y then Q=Q+1 end end end end;local Z=zonesOnline(K)if P/Z*100>=tonumber(SETTINGS["PressureSetpointHotZoneTrigger"])then reg[N..c]=V+R elseif Q/Z*100>=tonumber(SETTINGS["PressureSetpointColdZoneTrigger"])then reg[N..c]=V-R end;if reg[N..c]>S then reg[N..c]=S elseif reg[N..c]<T then reg[N..c]=T end;reg[U]=reg[N..c]end end end;if not luatest_running then while init_complete~=true do sleep(1000)end;while init_complete do if#UPDATE_BLOWER_STARTUP_LATER>0 then sleep(1000)updateBlowersLater()else sleep(SETTINGS['BlowerRate']*1000)updateAlarms()updateBlowers()for W,J in ipairs(BLOWER_IDS)do updateBlowerStartup(_G['BLOWER_'..J],J)end end end end