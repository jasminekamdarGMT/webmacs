local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t="control","blower","zone","duct","biofilter","regime","regtimer","direction","override","cycle","customcycle","cycleontime","cycleofftime","pressuresp","pospressuresp","negpressuresp","presssptimer","mistdelay","misttimer","pfrptime"SETTINGS={}WIRELESS_POINT_FAILURES={}UPDATE_ZONE_STARTUP_LATER={}init_complete=false;local u={a,"filename","batch",f,g,t,"print","movedfrom","prelzbloweroverride","prelzblowervalue","prelzblowerdirection","prelzblowerrevoverride","prelzdamperoverride","prelzdampervalue"}local v={h,a,i,j,k,l,m,"value"}local w={n,o,p,q}local x={r,s}function dbOpen(y,z)local A=sqlite3.open(webmacs_db_path..y)if A~=nil then reg[z..'inuse']=1 end;return A end;function dbClose(A,z)A:close()if A~=nil then reg[z..'inuse']=0 end end;function tableRowExists(B,table,C)for D in B:rows([[SELECT * FROM ]]..table..[[ WHERE name = "]]..C..[["]])do return true end;return false end;function insertTableRow(B,table,E)local F=[[INSERT INTO ]]..table..[[ VALUES (NULL]]for G,H in ipairs(E)do F=F..[[, "]]..H..[["]]end;B:exec(F..[[)]])end;function createMissingSettings()local I=dbOpen("settings.db",'settings')I:exec("CREATE TABLE settings (id INTEGER PRIMARY KEY, name, value)")for J,K in pairs(defaultSettings())do if tableRowExists(I,"settings",J)==false then insertTableRow(I,'settings',{J,K})end end;dbClose(I,'settings')end;function loadSettings()local I=dbOpen("settings.db",'settings')for D in I:rows('SELECT * FROM settings')do SETTINGS[D[2]]=D[3]end;dbClose(I,'settings')end;function createBatchFilesDB()local L=dbOpen("batch_files.db",'batchfiles')L:exec("CREATE TABLE batch_files (id INTEGER PRIMARY KEY, name, title)")if not luatest_running then print("Created Batch Files Database")end;dbClose(L,'batchfiles')end;function initZoneStartupRow(M,N,O)if tableRowExists(M,"zone_startup",N)==false then insertTableRow(M,'zone_startup',{N,O})end end;function createZoneStartupDB()local M=dbOpen("zone_startup.db",'zonestartup')M:exec("CREATE TABLE zone_startup (id INTEGER PRIMARY KEY, name, state)")for G,P in ipairs(ZONE_IDS)do for G,Q in ipairs(u)do local R=c..P;local S="0"if Q=='batch'or Q=='filename'then S=""end;initZoneStartupRow(M,R..Q,S)if not luatest_running then print("Init "..R..Q)end end;if not luatest_running then print("Init "..P)end end;if not luatest_running then print("Created Zone Startup Database")end;dbClose(M,'zonestartup')end;function getZoneState(T,N)local O=""for D in T:rows("SELECT * FROM zone_startup WHERE name = '"..N.."'")do O=D[3]end;return O end;function startupZones()local T=dbOpen("zone_startup.db",'zonestartup')for G,P in ipairs(ZONE_IDS)do for G,Q in ipairs(u)do local R=c..P;if Q=='filename'then _G['ZONE_'..P]['file_name']=getZoneState(T,R..Q)elseif Q=='batch'then setRegsFromState(R..Q,getZoneState(T,R..Q))else setRegsFromState(R..Q,tonumber(getZoneState(T,R..Q)))end end end;dbClose(T,'zonestartup')end;function updateZoneStartup(U,P)local R=c..P;local T=dbOpen("zone_startup.db",'zonestartup')if T==nil then table.insert(UPDATE_ZONE_STARTUP_LATER,P)else local V=getZoneState(T,R.."filename")local W=getZoneState(T,R.."batch")local F=""local S=""for G,Q in ipairs(u)do if string.sub(Q,1,5)~='prelz'then if Q=="filename"then S=U['file_name']V=S elseif Q=="batch"then S=W;if V==""and U['file_name']==""then S=""elseif S==""then local X={}if V==""then V=U['file_name']end;for Y in V:gmatch("([^_]+)")do table.insert(X,Y)end;if#X>4 then local Z=X[#X]S=string.sub(Z,1,#Z-4)end end elseif reg[R..Q]~=nil then S=tonumber(reg[R..Q])end;F=F..[[UPDATE zone_startup SET state="]]..S..[[" WHERE name="]]..R..Q..[[";]]end end;T:exec(F)dbClose(T,'zonestartup')end end;function initBlowerStartupRow(_,N,O)if tableRowExists(_,"blower_startup",N)==false then insertTableRow(_,'blower_startup',{N,O})end end;function createBlowerStartupDB()local _=dbOpen("blower_startup.db",'blowerstartup')_:exec("CREATE TABLE blower_startup (id INTEGER PRIMARY KEY, name, state)")for G,a0 in ipairs(BLOWER_IDS)do local a1=b..a0;local a2=d..a0;local a3=e..a0;for G,Q in ipairs(v)do initBlowerStartupRow(_,a1 ..Q,"0")if not luatest_running then print("Init "..a1 ..Q)end end;for G,Q in ipairs(w)do initBlowerStartupRow(_,a2 ..Q,"0")if not luatest_running then print("Init "..a2 ..Q)end end;for G,Q in ipairs(x)do initBlowerStartupRow(_,a3 ..Q,"0")if not luatest_running then print("Init "..a3 ..Q)end end;if not luatest_running then print("Init "..a0)end end;if not luatest_running then print("Created Blower Startup Database")end;dbClose(_,'blowerstartup')end;function getBlowerState(a4,N)local O=""for D in a4:rows("SELECT * FROM blower_startup WHERE name = '"..N.."'")do O=D[3]end;return O end;function setRegsFromState(a5,H)if reg[a5]~=nil then reg[a5]=H end end;function startupBlowers()local a4=dbOpen("blower_startup.db",'blowerstartup')for G,a0 in ipairs(BLOWER_IDS)do local a1=b..a0;local a2=d..a0;local a3=e..a0;for G,Q in ipairs(v)do setRegsFromState(a1 ..Q,tonumber(getBlowerState(a4,a1 ..Q)))end;for G,Q in ipairs(w)do setRegsFromState(a2 ..Q,tonumber(getBlowerState(a4,a2 ..Q)))end;for G,Q in ipairs(x)do setRegsFromState(a3 ..Q,tonumber(getBlowerState(a4,a3 ..Q)))end end;dbClose(a4,'blowerstartup')end;function updateBlowerStartup(a6,a0)local a4=dbOpen("blower_startup.db",'blowerstartup')if a4==nil then table.insert(UPDATE_BLOWER_STARTUP_LATER,a0)else local F=""local S;local a1=b..a0;local a2=d..a0;local a3=e..a0;for G,Q in ipairs(v)do S=reg[a1 ..Q]if S~=nil then F=F..[[UPDATE blower_startup SET state="]]..S..[[" WHERE name="]]..a1 ..Q..[[";]]end end;for G,Q in ipairs(w)do S=reg[a2 ..Q]if S~=nil then F=F..[[UPDATE blower_startup SET state="]]..S..[[" WHERE name="]]..a2 ..Q..[[";]]end end;for G,Q in ipairs(x)do S=reg[a3 ..Q]if S~=nil then F=F..[[UPDATE blower_startup SET state="]]..S..[[" WHERE name="]]..a3 ..Q..[[";]]end end;a4:exec(F)dbClose(a4,'blowerstartup')end end;function uid(a7,a8,a9)local aa={}if a8==nil then a8=a7;a7=1 end;for G=a7,a8,1 do local ab=G;if a9~=nil then ab=a9 ..G else ab=string.format("%02d",G)end;table.insert(aa,ab)end;return aa end;function logInsert(ac,H)if H=='nan'or type(H)=='number'and H<0 then H=0 end;if H~=H then H=0 end;table.insert(ac,H)end;function sortTableAsc(ac)local ad=false;local ae=ac;repeat ad=true;for G,K in pairs(ae)do if ae[G-1]~=nil then if ae[G-1]>ae[G]then ad=false;local af=ae[G-1]ae[G-1]=ae[G]ae[G]=af end end end until ad;return ae end;function updateEPATempAverages(ag,ah)local ai=false;local aj=SETTINGS["Zone"..ag.."RegimeType"]if aj==nil or aj=="pfrp"then ai=true end;if COUNT_PFRP_IN_WARMUP_ZONE and reg[c..ag..'regime']==2 then ai=true end;if ai then local ak,al,am,an,ao,ap=0,0,0,0,4320,reg[c..ag..t]local aq={}for ar,as in ipairs(getTempPrefixes(c,ag,ah))do local at=reg[as.."avgtemp"]if at>0 then table.insert(aq,at)ak=ak+at end end;if#aq>0 then aq=sortTableAsc(aq)am=aq[1]al=aq[#aq]ak=ak/#aq end;local au=ak;if PFRP_AGGREGATE~=nil then if PFRP_AGGREGATE=='min'then au=am elseif PFRP_AGGREGATE=='max'then au=al end end;if ap<ao then if au<PFRP_TEMP then reg[c..ag..t]=0 else reg[c..ag..t]=ap+SETTINGS['DataLoggingRate']end end end end;function updateZonesLater()local av=UPDATE_ZONE_STARTUP_LATER;UPDATE_ZONE_STARTUP_LATER={}for G,ag in pairs(av)do updateZoneStartup(_G['ZONE_'..ag],ag)end end;function updateBlowersLater()local av=UPDATE_BLOWER_STARTUP_LATER;UPDATE_BLOWER_STARTUP_LATER={}for G,aw in pairs(av)do updateBlowerStartup(_G['BLOWER_'..aw],aw)end end;function initSequence()sendInitAlarm()if not webmacs_db_path then webmacs_db_path='/usb/'end;if not batch_logs_path then batch_logs_path='/usb/'end;initValues()createMissingSettings()createBatchFilesDB()createZoneStartupDB()startupZones()if BLOWER_IDS~=nil then createBlowerStartupDB()startupBlowers()end;loadSettings()init_complete=true end;if not luatest_running then sleep(10000)initSequence()while init_complete do if#UPDATE_ZONE_STARTUP_LATER>0 then sleep(2000)updateZonesLater()else sleep(6000)updateAlarms()updateZones()end end end