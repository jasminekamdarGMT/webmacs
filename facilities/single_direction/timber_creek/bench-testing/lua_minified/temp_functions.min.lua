SINGLE_WIRE_SENSOR_MAX_VALID_TEMP=184;AVERAGE_ARRAYS={}SENSORS={}function tempIoAppearsValid(a)return ioAppearsValid(a)and io[a]<=SINGLE_WIRE_SENSOR_MAX_VALID_TEMP end;function resetAverage(b)AVERAGE_ARRAYS[b]={}end;function updateAverage(b,c,d)if not AVERAGE_ARRAYS[b]then resetAverage(b)end;table.insert(AVERAGE_ARRAYS[b],1,c)while#AVERAGE_ARRAYS[b]>d do table.remove(AVERAGE_ARRAYS[b])end;local e=0;local f=0;for g,h in pairs(AVERAGE_ARRAYS[b])do e=e+1;if e<=d then f=f+h end end;reg[b]=f/e end;function updateLVSensorAge(i,j)if j~=nil then reg[i..'tempage']=j end end;function updateLVTemp(i,k)if k~=nil then reg[i..'lvtemp']=k elseif tempIoAppearsValid(i..'temp')then reg[i..'lvtemp']=io[i..'temp']end end;function updateTempAverage(i,k)if k~=nil then updateAverage(i..'avgtemp',k,10)elseif tempIoAppearsValid(i..'temp')then updateAverage(i..'avgtemp',io[i..'temp'],10)end end;function getTempPrefixes(l,m,n)local o={}for p,q in ipairs(n)do if q==''then table.insert(o,l..m)else table.insert(o,l..m..'p'..q)end end;return o end;function tempAvgForZones(r,n)local s=0;local t=validTempsForZones(r,n)if#t>0 then for p,u in ipairs(t)do s=s+u end;s=s/#t end;return s end;function validTempsForZones(r,n)local t={}for v,w in ipairs(r)do if reg['zone'..w..'control']==1 then for p,i in ipairs(getTempPrefixes('zone',w,n))do if reg[i..'lvtemp']then local u=reg[i..'lvtemp']if u>0 then table.insert(t,u)end end end end end;return sortTableAsc(t)end;function maxTempForZones(r,n)local x=0;local t=validTempsForZones(r,n)if#t>0 then x=t[#t]end;return x end;function minTempForZones(r,n)local y=0;local t=validTempsForZones(r,n)if#t>0 then y=t[1]end;return y end;function tempAverageForBiofilters(z,n)local e=0;local A=0;for v,B in ipairs(z)do for p,i in ipairs(getTempPrefixes('biofilter',B,n))do if reg[i..'lvtemp']and reg[i..'lvtemp']>0 then A=A+reg[i..'lvtemp']e=e+1 end end end;if e>0 then return A/e else return 0 end end;function sendCmd(C)rc=tcpSend(string.char(02)..C..string.char(13))return rc end;function getSensorCount()rc=sendCmd('S')if rc>0 then rc=tcpRecv()str=responseSubstr(0,rc)if str==nil then return 0 end;local data={}for D in str:gmatch("([^,]+)")do table.insert(data,D)end;return tonumber(data[2])else return 0 end end;function getSensorID(E)rc=sendCmd('CSR'..E)if rc>0 then rc=tcpRecv()str=responseSubstr(0,rc)if str==nil then return nil end;local data={}for D in str:gmatch("([^,]+)")do table.insert(data,D)end;if data[3]and#data[3]==16 then return data[3]else return nil end end end;function getSensorData(E)rc=sendCmd("D"..E)if rc>0 then rc=tcpRecv()data=responseSubstr(0,rc)return data end end;function retrieveWirelessSensorDataTCP()SENSORS={}local F,G=tonumber(SETTINGS["WirelessSensorAgeAlarm"])*60,86400;local H=F+G;local I=2;if I==2 then I=tcpConnect(SETTINGS["WirelessBaseStationIP"],1000,3000)end;if I==1 then local e=0;e=getSensorCount()if e>0 then for E=1,e do sn_id=getSensorID(E)if sn_id~=nil then SENSORS[sn_id]={}sd=getSensorData(E)data_table=parsePointManagerResponse(sd)SENSORS[sn_id]=data_table end end end;reg["wirelesscommfailure"]=H elseif I<1 then print('TCP Err: ',I)end;tcpClose()SENSORS["tcp_response"]=I;return SENSORS end;function maxtempAvgForZones(r,n)local J=0;local K=0;for v,w in ipairs(r)do K=tempAvgForZones({w},n)if K>J then J=K end end;return J end;function zoneTempAlarm(L,w,n)if reg['zone'..w..'control']==1 then local M=0;local N=0;local O=0;for v,i in ipairs(getTempPrefixes('zone',w,n))do if reg[i..'lvtemp']>reg[i..'avgtemp']then M=reg[i..'lvtemp']else M=reg[i..'avgtemp']end;if M>N then N=M end end;if N<tonumber(SETTINGS["MinTemperatureAlarm"])or N>tonumber(SETTINGS["MaxTemperatureAlarm"])then L['temp_in_alarm']=L['temp_in_alarm']+1;O=1 end;if O>0 and L['temp_in_alarm']>4 then if L['email_sent']==0 then local P=w;if ZONE_LABELS then P=ZONE_LABELS[w]end;sendAlarm("Zone "..P,N)L['email_sent']=1 end else L['email_sent']=0 end;if O<1 then L['temp_in_alarm']=0 end end end;function wirelessSensorAgeAlarm(Q,l,m,n)if Q[l..'_wireless_sensor_age_in_alarm']==nil then Q[l..'_wireless_sensor_age_in_alarm']=0;Q[l..'_wireless_sensor_age_alarm_email_sent']=0;Q[l..'_wireless_sensor_age_alarm_cooldown']=0 end;local R=nil;local S=0;for v,i in ipairs(getTempPrefixes(l,m,n))do if reg[i..'tempage']~=nil then R=tonumber(reg[i..'tempage'])if R>tonumber(SETTINGS["WirelessSensorAgeAlarm"])*60 then Q[l..'_wireless_sensor_age_in_alarm']=Q[l..'_wireless_sensor_age_in_alarm']+1;S=1 end end end;if R~=nil then if S>0 and Q[l..'_wireless_sensor_age_in_alarm']>2 then if Q[l..'_wireless_sensor_age_alarm_cooldown']>0 then Q[l..'_wireless_sensor_age_alarm_cooldown']=Q[l..'_wireless_sensor_age_alarm_cooldown']-1 else if Q[l..'_wireless_sensor_age_alarm_email_sent']==0 then R=math.floor(R/60+0.5)prefix_str=l:gsub("^%l",string.upper).." "local P=m;if l:find("zone")and ZONE_LABELS then P=ZONE_LABELS[m]end;sendAlarm(prefix_str..P.." Temperature Sensor Communication",R.." minutes since last transmission")Q[l..'_wireless_sensor_age_alarm_email_sent']=1;Q[l..'_wireless_sensor_age_alarm_cooldown']=30 end end elseif S<1 then if Q[l..'_wireless_sensor_age_alarm_cooldown']==0 then Q[l..'_wireless_sensor_age_in_alarm']=0;Q[l..'_wireless_sensor_age_alarm_email_sent']=0 end end end end;function parsePointManagerResponse(T)data_table={}if T~=nil then if string.match(T,",")then comma_index=string.find(T,',')data_table['command']=string.sub(T,1,comma_index-1)T=string.match(T,",(.*)")end;data_table['system_alarm']=string.sub(T,1,1)data_table['sensor_alarm']=string.sub(T,9,9)data_table['service_mode']=string.sub(T,10,10)data_table['state_of_concern_io_1']=string.sub(T,11,11)data_table['state_of_concern_io_2']=nil;if string.match(T,'|')then local U=string.find(T,'|')data_table['state_of_concern_io_2']=string.sub(T,U+1,U+1)data_table['temp_1']=string.sub(T,12,U-1)data_table['temp_2']=string.sub(T,U+2,-1)else data_table['temp_1']=string.sub(T,12,-1)data_table['temp_2']=nil end;data_table['age']=string.sub(T,4,8)data_table['sensor_type']=string.sub(T,2,3)end;return data_table end;function updateWirelessTemps(V,W,X)local F,G=tonumber(SETTINGS["WirelessSensorAgeAlarm"])*60,86400;local H=F+G;local Y=reg["wirelesscommfailure"]local Z=string.sub(SETTINGS[V],1,#SETTINGS[V]-2)local _=string.sub(SETTINGS[V],-2)if Z~=nil and X~=nil and X[Z]~=nil then updateLVTemp(W,tonumber(X[Z]["temp".._]))updateLVSensorAge(W,tonumber(X[Z]["age"]))WIRELESS_POINT_FAILURES[V]=0 else if X["tcp_response"]<1 then local a0=H-Y;if WIRELESS_POINT_FAILURES[V]==0 and Y==0 then reg["wirelesscommfailure"]=H elseif WIRELESS_POINT_FAILURES[V]>1 then if a0>=G then updateLVTemp(W,0)end;if a0>65535 then updateLVSensorAge(W,65535)else updateLVSensorAge(W,a0)end end else if WIRELESS_POINT_FAILURES[V]>=100 then updateLVSensorAge(W,65535)elseif WIRELESS_POINT_FAILURES[V]>=50 then updateLVSensorAge(W,F)end end;WIRELESS_POINT_FAILURES[V]=WIRELESS_POINT_FAILURES[V]+1 end end;if not luatest_running then while init_complete~=true do sleep(1000)end;while init_complete do sleep(6000)if reg['refreshsettings']==1 then if pcall(loadSettings)then reg['refreshsettings']=0 else print('Error loading settings')end end;if reg["pollwirelesstemps"]~=nil then if reg["pollwirelesstemps"]==0 then updateLastValidTemps()reg["pollwirelesstemps"]=SETTINGS["WirelessTempsPollInterval"]*60 end else updateLastValidTemps()end;updateAlarms()updateAverages()end end