enableDebug()SINGLE_WIRE_SENSOR_MAX_VALID_TEMP=184;AVERAGE_ARRAYS={}local a,b="10.0.0.151",502;init_complete=1;function retrieveWirelessSensorDataTCP()print("will it work???")SENSORS={}local c={0x00,0x01,0x00,0x00,0x00,0x06,0x01,0x03,0x00,0x64,0x00,0x10}r={}local d=2;if d==2 then d=tcpConnect(a,b,3000)end;if d==1 then print('###',#c)send=tcpSend(c)print("resp: ",send)rc=tcpRecv()if rc>0 then reg["wirelesscommfailure"]=maxcommfailure;data=responseGetBytes(0,rc)if data~=nil then local e=1;for f,g in pairs(data)do print(e.." : "..g)e=e+1;table.insert(r,g)end end end end;tcpClose()print(table.concat(r))print("Processed through all packets -- parsing results")SENSORS["tcp_response"]=d;return SENSORS end;function tempIoAppearsValid(h)return ioAppearsValid(h)and io[h]<=SINGLE_WIRE_SENSOR_MAX_VALID_TEMP end;function resetAverage(i)AVERAGE_ARRAYS[i]={}end;function updateAverage(i,j,k)if not AVERAGE_ARRAYS[i]then resetAverage(i)end;table.insert(AVERAGE_ARRAYS[i],1,j)local l=0;local m=0;for n,o in pairs(AVERAGE_ARRAYS[i])do l=l+1;if l<=k then m=m+o end end;if l>k then table.remove(AVERAGE_ARRAYS[i])l=l-1 end;reg[i]=m/l end;function updateLVSensorAge(p,q)if q~=nil then reg[p..'tempage']=q end end;function updateLVTemp(p,s)if s~=nil then reg[p..'lvtemp']=s elseif tempIoAppearsValid(p..'temp')then reg[p..'lvtemp']=io[p..'temp']end end;function updateTempAverage(p,s)if s~=nil then updateAverage(p..'avgtemp',s,10)elseif tempIoAppearsValid(p..'temp')then updateAverage(p..'avgtemp',io[p..'temp'],10)end end;function getTempPrefixes(t,u,v)local w={}for x,y in ipairs(v)do if y==''then table.insert(w,t..u)else table.insert(w,t..u..'p'..y)end end;return w end;function tempAvgForZones(z,v)local A=0;local B=validTempsForZones(z,v)if#B>0 then for x,C in ipairs(B)do A=A+C end;A=A/#B end;return A end;function validTempsForZones(z,v)local B={}for e,D in ipairs(z)do if reg['zone'..D..'control']==1 then for x,p in ipairs(getTempPrefixes('zone',D,v))do if reg[p..'lvtemp']then local C=reg[p..'lvtemp']if C>0 then table.insert(B,C)end end end end end;return sortTableAsc(B)end;function maxTempForZones(z,v)local E=0;local B=validTempsForZones(z,v)if#B>0 then E=B[#B]end;return E end;function minTempForZones(z,v)local F=0;local B=validTempsForZones(z,v)if#B>0 then F=B[1]end;return F end;function tempAverageForBiofilters(G,v)local l=0;local H=0;for e,I in ipairs(G)do for x,p in ipairs(getTempPrefixes('biofilter',I,v))do if reg[p..'lvtemp']and reg[p..'lvtemp']>0 then H=H+reg[p..'lvtemp']l=l+1 end end end;if l>0 then return H/l else return 0 end end;function maxtempAvgForZones(z,v)local J=0;local K=0;for e,D in ipairs(z)do K=tempAvgForZones({D},v)if K>J then J=K end end;return J end;function zoneTempAlarm(L,D,v)if reg['zone'..D..'control']==1 then local M=0;local N=0;local O=0;for e,p in ipairs(getTempPrefixes('zone',D,v))do if reg[p..'lvtemp']>reg[p..'avgtemp']then M=reg[p..'lvtemp']else M=reg[p..'avgtemp']end;if M>N then N=M end end;if N<tonumber(SETTINGS["MinTemperatureAlarm"])or N>tonumber(SETTINGS["MaxTemperatureAlarm"])then L['temp_in_alarm']=L['temp_in_alarm']+1;O=1 end;if O>0 and L['temp_in_alarm']>4 then if L['email_sent']==0 then sendAlarm("Zone "..D,N)L['email_sent']=1 end else L['email_sent']=0 end;if O<1 then L['temp_in_alarm']=0 end end end;function wirelessSensorAgeAlarm(P,t,u,v)if P[t..'_wireless_sensor_age_in_alarm']==nil then P[t..'_wireless_sensor_age_in_alarm']=0;P[t..'_wireless_sensor_age_alarm_email_sent']=0;P[t..'_wireless_sensor_age_alarm_cooldown']=0 end;local Q=nil;local R=0;for e,p in ipairs(getTempPrefixes(t,u,v))do if reg[p..'tempage']~=nil then Q=tonumber(reg[p..'tempage'])if Q>tonumber(SETTINGS["WirelessSensorAgeAlarm"])*60 then P[t..'_wireless_sensor_age_in_alarm']=P[t..'_wireless_sensor_age_in_alarm']+1;R=1 end end end;if Q~=nil then if R>0 and P[t..'_wireless_sensor_age_in_alarm']>2 then if P[t..'_wireless_sensor_age_alarm_cooldown']>0 then P[t..'_wireless_sensor_age_alarm_cooldown']=P[t..'_wireless_sensor_age_alarm_cooldown']-1 else if P[t..'_wireless_sensor_age_alarm_email_sent']==0 then Q=math.floor(Q/60+0.5)prefix_str=t:gsub("^%l",string.upper).." "sendAlarm(prefix_str..u.." Temperature Sensor Communication",Q.." minutes since last transmission")P[t..'_wireless_sensor_age_alarm_email_sent']=1;P[t..'_wireless_sensor_age_alarm_cooldown']=30 end end elseif R<1 then if P[t..'_wireless_sensor_age_alarm_cooldown']==0 then P[t..'_wireless_sensor_age_in_alarm']=0;P[t..'_wireless_sensor_age_alarm_email_sent']=0 end end end end;function parsePointManagerResponse(S)data_table={}if S~=nil then if string.match(S,",")then comma_index=string.find(S,',')data_table['command']=string.sub(S,1,comma_index-1)S=string.match(S,",(.*)")end;data_table['system_alarm']=string.sub(S,1,1)data_table['sensor_alarm']=string.sub(S,9,9)data_table['service_mode']=string.sub(S,10,10)data_table['state_of_concern_io_1']=string.sub(S,11,11)data_table['state_of_concern_io_2']=nil;if string.match(S,'|')then local T=string.find(S,'|')data_table['state_of_concern_io_2']=string.sub(S,T+1,T+1)data_table['temp_1']=string.sub(S,12,T-1)data_table['temp_2']=string.sub(S,T+2,-1)else data_table['temp_1']=string.sub(S,12,-1)data_table['temp_2']=nil end;data_table['age']=string.sub(S,4,8)data_table['sensor_type']=string.sub(S,2,3)end;return data_table end;function updateWirelessTemps(U,V,W)local X,Y=tonumber(SETTINGS["WirelessSensorAgeAlarm"])*60,86400;local maxcommfailure=X+Y;local Z=reg["wirelesscommfailure"]local _=string.sub(SETTINGS[U],1,#SETTINGS[U]-2)local a0=string.sub(SETTINGS[U],-2)if _~=nil and W~=nil and W[_]~=nil then updateLVTemp(V,tonumber(W[_]["temp"..a0]))updateLVSensorAge(V,tonumber(W[_]["age"]))WIRELESS_POINT_FAILURES[U]=0 else if W["tcp_response"]<1 then local a1=maxcommfailure-Z;if WIRELESS_POINT_FAILURES[U]==0 and Z==0 then reg["wirelesscommfailure"]=maxcommfailure elseif WIRELESS_POINT_FAILURES[U]>1 then if a1>=Y then updateLVTemp(V,0)end;if a1>65535 then updateLVSensorAge(V,65535)else updateLVSensorAge(V,a1)end end else if WIRELESS_POINT_FAILURES[U]>=100 then updateLVSensorAge(V,65535)elseif WIRELESS_POINT_FAILURES[U]>=50 then updateLVSensorAge(V,X)end end;WIRELESS_POINT_FAILURES[U]=WIRELESS_POINT_FAILURES[U]+1 end end;function updateAverages()updateTempAverages()updateDamperAverages()end;function updateDamperAverages()for e,a2 in ipairs(ZONE_IDS)do local a3=ZN_DMPR_IDS[a2]updateDamperAverage(a2,a3)end end;function spForZone(a2)local a4=reg["zone"..a2 .."regime"]if a4<2 then return SETTINGS["Regime".."1".."TempSetPoint"]else return SETTINGS["Regime"..a4 .."TempSetPoint"]end end;if not luatest_running then while init_complete~=true do sleep(1000)end;while init_complete do print('init_complete')sleep(6000)if reg['refreshsettings']==1 then if pcall(loadSettings)then reg['refreshsettings']=0 else print('Error loading settings')end end;if reg["pollwirelesstemps"]~=nil then if reg["pollwirelesstemps"]==0 then updateLastValidTemps()reg["pollwirelesstemps"]=SETTINGS["WirelessTempsPollInterval"]*60 end else updateLastValidTemps()end;updateAverages()end end